# Import required libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.ensemble import RandomForestRegressor, RandomForestClassifier
from sklearn.svm import SVR, SVC
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, classification_report
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
import seaborn as sns

# Load and prepare the dataset
def load_and_prepare_data(filepath):
    """
    Load the dataset and perform initial preprocessing
    """
    df = pd.read_csv(filepath)
    
    # Drop any rows with missing values
    df = df.dropna()
    
    # Convert price column to numeric, removing '$' and ',' characters
    df['PRICE'] = df['PRICE'].str.replace('$', '').str.replace(',', '').astype(float)
    
    return df

# Feature engineering and selection
def prepare_features(df):
    """
    Prepare features for modeling
    """
    # Select relevant features
    features = ['BEDS', 'BATHS', 'SQFT', 'YEAR BUILT']
    X = df[features]
    y = df['PRICE']
    
    # Scale features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    return X_scaled, y, features

# Regression Models
def build_regression_models(X, y):
    """
    Build and evaluate multiple regression models
    """
    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    
    models = {
        'Linear Regression': LinearRegression(),
        'Random Forest': RandomForestRegressor(n_estimators=100, random_state=42),
        'SVR': SVR(kernel='rbf')
    }
    
    results = {}
    
    for name, model in models.items():
        # Train model
        model.fit(X_train, y_train)
        
        # Make predictions
        y_pred = model.predict(X_test)
        
        # Calculate metrics
        mse = mean_squared_error(y_test, y_pred)
        rmse = np.sqrt(mse)
        r2 = r2_score(y_test, y_pred)
        
        results[name] = {
            'RMSE': rmse,
            'R2': r2
        }
    
    return results

# Classification Models
def build_classification_models(X, y):
    """
    Build and evaluate multiple classification models
    """
    # Create binary labels based on median price
    median_price = np.median(y)
    y_binary = (y >= median_price).astype(int)
    
    # Split the data
    X_train, X_test, y_train, y_test = train_test_split(X, y_binary, test_size=0.2, random_state=42)
    
    models = {
        'Logistic Regression': LogisticRegression(random_state=42),
        'Random Forest': RandomForestClassifier(n_estimators=100, random_state=42),
        'SVC': SVC(kernel='rbf', random_state=42)
    }
    
    results = {}
    
    for name, model in models.items():
        # Train model
        model.fit(X_train, y_train)
        
        # Make predictions
        y_pred = model.predict(X_test)
        
        # Calculate metrics
        accuracy = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred)
        
        results[name] = {
            'Accuracy': accuracy,
            'Report': report
        }
    
    return results

# Clustering
def perform_clustering(X, n_clusters=3):
    """
    Perform K-means clustering
    """
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    clusters = kmeans.fit_predict(X)
    return clusters

# Main analysis
def main():
    # Load data
    df = load_and_prepare_data('new_york_housing.csv')
    
    # Prepare features
    X_scaled, y, features = prepare_features(df)
    
    # Build and evaluate regression models
    regression_results = build_regression_models(X_scaled, y)
    
    # Build and evaluate classification models
    classification_results = build_classification_models(X_scaled, y)
    
    # Perform clustering
    clusters = perform_clustering(X_scaled)
    
    # Print results
    print("\nRegression Model Results:")
    print("------------------------")
    best_reg_model = max(regression_results.items(), key=lambda x: x[1]['R2'])
    worst_reg_model = min(regression_results.items(), key=lambda x: x[1]['R2'])
    
    for name, metrics in regression_results.items():
        print(f"\n{name}:")
        print(f"RMSE: ${metrics['RMSE']:,.2f}")
        print(f"R2 Score: {metrics['R2']:.4f}")
    
    print("\nBest Regression Model:", best_reg_model[0])
    print("Worst Regression Model:", worst_reg_model[0])
    
    print("\nClassification Model Results:")
    print("----------------------------")
    best_clf_model = max(classification_results.items(), key=lambda x: x[1]['Accuracy'])
    worst_clf_model = min(classification_results.items(), key=lambda x: x[1]['Accuracy'])
    
    for name, metrics in classification_results.items():
        print(f"\n{name}:")
        print(f"Accuracy: {metrics['Accuracy']:.4f}")
        print("Classification Report:")
        print(metrics['Report'])
    
    print("\nBest Classification Model:", best_clf_model[0])
    print("Worst Classification Model:", worst_clf_model[0])

if __name__ == "__main__":
    main()
